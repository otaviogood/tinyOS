const allVids = {
    "thomas": "GnrwM7vFn_U",
    "elmo": "vSYadh2xmcI",
    "hat": "8_UnANdDqJc",
    "let it go": "NH15p2dqvJk",
    "mama yoho": "tgbNymZ7vqY",
    "dancer": "65CNtap6bow",
    "dollars": "DT1NJwEi6nw",
    "manatee": "pd1WGa4JNfE",
    "pig": "4n7bUYBYZPE",
    "good bad": "enuOArEfqGo",
    "muffin man": "fXFg5QsTcLQ",
    "yodel metal": "_xpb0_GXkV8",
    "stand up": "t9WAGkQUUL0",
    "fish": "uCF3vBuxXS8",
    "auto": "rfoKnb-Tj1M",
    "despacito": "kJQP7kiw5Fk",
    "apples": "r5WLXZspD1M",
    "roses": "m2AuVIjy5po",
    "candyman": "k-ykJHUIyEw",
    "komm mit": "SmGUmVPRMCA",
    "particle": "vOLivyykLqk",
    "hakuna": "BAoCYwefq1A",
    "sun": "hlzvrEfyL2Y",
    "chicken": "DQU70FFFw6Y",
    "sillies": "03zqJQJRLN0",
    "witch doctor": "cmjrTcYMqBM",
    "trick or treat": "veZlIX6d63Y",
    "count": "ZIniljT5lJI",
    "count bones": "LP2rVGbZXrw",
    "batty bat": "N7yAe2MBIpE",
    "bruno": "EgCofsnrz2I",
    "lava": "uh4dTLJ9q9o",
    "mahna mahna": "QTXyXuqfBLA",
    "choo choo": "3Awey7AbXT0",
    "christmas in hollis": "C0b8FqocXcU",
    "mahna remix": "rxsI6YHRmfU",
    "sweet dreams": "eRhg7qPLeN8",
    "stick em": "zUWwglLXV8g",
    "peanut butter jelly": "s8MDNFaGfT4",
    "very noise": "Osqf4oIK0E8",
    "googly eyes": "wjFJCZCHzNY",
    "low rider": "qMkwuz0iXQg",
    "fantastic voyage": "zMJFJ73VyT8",
    "bird is the word": "IvF98Zeumes",
    "c is for cookie": "Ye8mB6VsUHw",
    "baby bumblebee": "krjBYu80f-c",
    "go for g": "QoLySyi46zw",
    "feliz navidad": "N8NcQzMQN_U",
    "banana phone": "dIiZ3vvZ78s",
    "kokomo": "0qkSQvx46bA",
    "hot dog": "NoavHX75s_E",
    "magic dragon": "s26e_86-K0k",
    "honk bang": "ZJI875D7AZk",
};

async function sleep(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}

const ytdl = require("ytdl-core");
const request = require("request");
const fs = require("fs");
const path = require("node:path");
const { assert } = require("console");

let jsonInfo =
    "// ****** THIS FILE IS GENERATED BY youtubeDownload.cjs. DON'T MANUALLY MODIFY IT. ******\r\n\r\nexport let allMediaAll = {\r\n";
let speechInfo = `// This weird string will be parsed by genSpeech.cjs to generate the speech synthesis files.\r\n
    /*!speech
[
`;

async function downloadAudio(shortName, link, destFolder = "../public/youtube") {
    if (!link.includes("youtube.com") && link.length < 15) link = `https://www.youtube.com/watch?v=${link}`;
    let hash = link.split("v=")[1];
    console.log(`Downloading audio of "${shortName}" from ${link}...`);
    const info = await ytdl.getInfo(link);
    const audioFormats = ytdl.filterFormats(info.formats, "audioonly");
    // const audioFormats = ytdl.filterFormats(info.formats, (format) => format.container === "mp4");
    // Find in audioFormats one with mimeType that starts with 'audio/mp4', and with the highest bitrate
    const audioFormat = audioFormats.reduce((prev, curr) => {
        if (curr.mimeType.startsWith("audio/mp4") && curr.bitrate > prev.bitrate) return curr;
        return prev;
    }, { bitrate: 0 });
    const audioStream = ytdl(link, { format: audioFormat });

    // Also get the description and thumbnail.
    const desc = info.videoDetails.description;
    const thumb = info.videoDetails.thumbnails[0].url;
    const fileName = path.join(destFolder, `_${hash}.${audioFormat.container}`);
    const thumbName = path.join(destFolder, "_" + hash + "_thumb.jpg");
    if (!fs.existsSync(fileName) || !fs.existsSync(thumbName)) {
        const file = fs.createWriteStream(fileName);
        audioStream.pipe(file);

        assert(thumb.includes("jpg"));
        const fileImage = fs.createWriteStream(thumbName);
        request(thumb)
            .pipe(fileImage)
            .on("finish", () => {
                console.log("Download thumb complete!");
            });
        console.log(`Downloading audio of "${info.videoDetails.title}" to ${fileName}... thumb: ${thumb}`);
        await sleep(500);
    }
    // Fill out jsonInfo with shortName as the key, and hash
    jsonInfo += `"${shortName}": ["${hash}", "${info.videoDetails.title.replaceAll('"', "")}", "${audioFormat.container}"],\r\n`;
    speechInfo += `"${shortName}",\r\n`;
}

async function downloadAll() {
    for (const [key, value] of Object.entries(allVids)) {
        await downloadAudio(key, value);
    }
    jsonInfo += "};\r\n";
    speechInfo += `
]
    */`;
    jsonFolder = "../src/apps";
    // Write the json file to jsonFolder.
    fs.writeFile(path.join(jsonFolder, "mediaGenerated.js"), jsonInfo + speechInfo, (err) => {
        if (err) throw err;
        console.log("JSON file saved!");
    });
}

downloadAll();
