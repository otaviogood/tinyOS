const allVids = {
    "thomas": "GnrwM7vFn_U",
    "elmo": "vSYadh2xmcI",
    "hat": "8_UnANdDqJc",
    "let it go": "NH15p2dqvJk",
    "mama yoho": "tgbNymZ7vqY",
    "dollars": "DT1NJwEi6nw",
    "manatee": "pd1WGa4JNfE",
    "pig": "4n7bUYBYZPE",
    "good bad": "enuOArEfqGo",
    "muffin man": "fXFg5QsTcLQ",
    "yodel metal": "_xpb0_GXkV8",
    "stand up": "t9WAGkQUUL0",
    "fish": "uCF3vBuxXS8",
    "auto": "rfoKnb-Tj1M",
    "despacito": "kJQP7kiw5Fk",
    "apples": "r5WLXZspD1M",
    "roses": "m2AuVIjy5po",
    "candyman": "k-ykJHUIyEw",
    "komm mit": "SmGUmVPRMCA",
    "particle": "vOLivyykLqk",
    "hakuna": "BAoCYwefq1A",
    "sun": "hlzvrEfyL2Y",
    "chicken": "DQU70FFFw6Y",
    "sillies": "03zqJQJRLN0",
    "witch doctor": "cmjrTcYMqBM",
    "trick or treat": "veZlIX6d63Y",
    "count": "ZIniljT5lJI",
    "count bones": "LP2rVGbZXrw",
    "batty bat": "N7yAe2MBIpE",
    // "bruno": "EgCofsnrz2I",
    "lava": "uh4dTLJ9q9o",
    "mahna mahna": "QTXyXuqfBLA",
    "choo choo": "3Awey7AbXT0",
    "christmas in hollis": "C0b8FqocXcU",
    "mahna remix": "rxsI6YHRmfU",
    "sweet dreams": "eRhg7qPLeN8",
    "stick em": "zUWwglLXV8g",
    "peanut butter jelly": "s8MDNFaGfT4",
    "very noise": "Osqf4oIK0E8",
    "googly eyes": "wjFJCZCHzNY",
    "low rider": "qMkwuz0iXQg",
    "fantastic voyage": "zMJFJ73VyT8",
    "bird is the word": "IvF98Zeumes",
    "c is for cookie": "Ye8mB6VsUHw",
    "baby bumblebee": "krjBYu80f-c",
    "go for g": "QoLySyi46zw",
    "feliz navidad": "N8NcQzMQN_U",
    "banana phone": "dIiZ3vvZ78s",
    "kokomo": "0qkSQvx46bA",
    "hot dog": "NoavHX75s_E",
    "magic dragon": "s26e_86-K0k",
    "honk bang": "ZJI875D7AZk",
    "power rangers": "BwbHW8MeHDU",
    "going to eat pizza": "Z9_sCkuRkog",
    "flowers": "i9kZZJzSNeo",
    "hole in the bottom": "oQCzgmO1D1g",
    "pokemon": "wrCUQuJsDYI",
    "move it": "hdcTmpvDO0I",
    "cucumber": "13DvXLdr_H4",
    "hairbrush": "LtHr7gluh08",
    "crazy train": "tMDFv5m18Pw",
    "baby beluga": "mIBY-LQYkVA",
    "taco taco": "eP82CCW-hSA",
    "addams family": "X6QzbvH-ZNo",
    "raining pouring": "avurCRJiUj0",
    "yellow submarine": "j_JaDDcyIIU",
    "tarantula": "3ZR2p-DhSX4",
    "aiken drum": "koA9DXAnSN8",
    "blackbird": "Man4Xw8Xypo",
    "ghost riders": "3LtmZM0OWO8",
    "surfin safari": "KrPDLxmfWPM",
    "surfin usa": "H0bhSGfKTs4",
    "believer": "o0LydWpBQts",
    "how many mics": "-UyapAppSMQ",
    "people are strange": "j0Mz_IqpZX8",
    "muppet show": "27vGo-TVp3Q",
    "mahna mahna 1969": "y5W60VwDkas",
    "4 on the floor": "1Kc9D4b8NFg",
    "grimes": "Tv9YoYCKNoE",
    "bad guy": "en5qEojed1o",
    "buy an o": "3c8iU8pHZrQ",
    "immortals": "Y4o_8zbelwY",
    "east bound": "IOgUaFkpS3Y",
    "dance monkey": "oy_VGhM2G4o",
    "gorillaz": "hhEJentZxxs",
    "country roads": "1vrEljMfXYo",
    "how far": "cPAbx5kgCJo",
    "under the sea": "GC_mV1IpjWA",
    "unholy": "_fbq8RaKlxI",
    "octopus garden": "A7coEcXjd7Q",
    "spongebob": "LAxchGHx13s",
    "world hold on": "XpdpW0z9xnQ",
    "love is the answer": "e5a26pvzwPM",
    "corneta": "Nt9hfCuEWTk",
    "yellow flicker": "QnoXecGpq6g",
    "nature boy": "RMA_9L53BGw",
    "butterflies": "y3l-ovZQY4M",
    "paid in full": "E7t8eoA_1jQ",
    "in my mind": "W9P_qUnMaFg",
    "royals": "nlcIKh6sBtc",
    "animals": "CkRyaG4Mjik",
    "american boy": "h7t9o5STsK0",
    "crazy": "Qe500eIK1oA",
    "mad world": "sFIQgPAms88",
    "used to know": "8UVNT4wvIGY",
    "hideaway": "Vnoz5uBEWOA",
    "portugal the man": "8xT0vWporWs",
    "sunday best": "Xt3m04Tscc8",
    "hey jude": "mQER0A0ej0M",
    "here comes the sun": "tDEzmaZHuS0",
    "southern cross": "4FBDOU6NEZ8",
    "cloudy day": "V91GRYjlR2I",
    "lost ones": "4HhfKArW3BY",
    "i need a dollar": "nFZP8zQ5kzk",
    "get low whistle": "7nUdHAVSLr4",
    "summertime sadness": "5gqEJT1lxgk",
    "boy oh boy": "_LmnkRzP3oM",
    "wake me up": "3JvM-fnpPCU",
    "human beat box": "jJewbFZHI34",
    "creator": "Bfejcxo5_XY",
    "disparate youth": "mIMMZQJ1H6E",
    "biko": "jsVieeccpQs",
    "nice sprites": "WSeNSzJ2-Jw",
    "fantasy": "r58GQYFZeLE",
    "around the world": "K0HSD_i2DvA",
    "cracks": "K1VLaXoRRdk",
    "noahs ark": "5-EvDCGu19o",
    "wa do dem": "BIfRaPvXTdI",
    "in your eyes": "r-v1NbdPZNs",
};

async function sleep(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}

const youtubedl = require("youtube-dl-exec");
const request = require("request");
const fs = require("fs");
const path = require("node:path");
const { assert } = require("console");

let jsonInfo =
    "// ****** THIS FILE IS GENERATED BY youtubeDownload.cjs. DON'T MANUALLY MODIFY IT. ******\r\n\r\nexport let allMediaAll = {\r\n";
let speechInfo = `// This weird string will be parsed by genSpeech.cjs to generate the speech synthesis files.\r\n
    /*!speech
[
`;

async function downloadAudio(shortName, link, destFolder = "../public/youtube") {
    if (!link.includes("youtube.com") && link.length < 15) link = `https://www.youtube.com/watch?v=${link}`;
    let hash = link.split("v=")[1];
    const fileName = path.join(destFolder, `_${hash}.mp4`);
    const thumbName = path.join(destFolder, "_" + hash + "_thumb.jpg");

    // Check if both the audio file and thumbnail already exist
    if (fs.existsSync(fileName) && fs.existsSync(thumbName)) {
        console.log(`Files for "${shortName}" (${hash}) already exist. Skipping download.`);
        // We still need to update jsonInfo and speechInfo
        jsonInfo += `"${shortName}": ["${hash}", "", "mp4"],\r\n`;
        speechInfo += `"${shortName}",\r\n`;
        return;
    }

    console.log(`Downloading audio of "${shortName}" from ${link}...`);

    const info = await youtubedl(link, {
        dumpSingleJson: true,
        noCheckCertificates: true,
        noWarnings: true,
        preferFreeFormats: true,
        addHeader: [
            "referer:youtube.com",
            "user-agent:Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
        ],
    });

    if (!fs.existsSync(fileName)) {
        console.time("audio download");
        await youtubedl(link, {
            output: fileName,
            format: "bestaudio[ext=m4a]",
            noCheckCertificates: true,
            noWarnings: true,
            preferFreeFormats: true,
            addHeader: [
                "referer:youtube.com",
                "user-agent:Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
            ],
        });
        console.timeEnd("audio download");
    }

    if (!fs.existsSync(thumbName)) {
        // Find the smallest thumbnail that's at least 168x94
        const suitableThumbnail = info.thumbnails.reduce((prev, curr) => {
            if (
                curr.width >= 168 &&
                curr.height >= 94 &&
                (prev === null || curr.width * curr.height < prev.width * prev.height)
            ) {
                return curr;
            }
            return prev;
        }, null);

        if (suitableThumbnail) {
            const fileImage = fs.createWriteStream(thumbName);
            request(suitableThumbnail.url)
                .pipe(fileImage)
                .on("finish", () => {
                    console.log("Download thumb complete!");
                });
        } else {
            console.log("No suitable thumbnail found.");
        }
    }

    console.log(`Process complete for "${info.title}"`);

    jsonInfo += `"${shortName}": ["${hash}", "${info.title.replaceAll('"', "")}", "mp4"],\r\n`;
    speechInfo += `"${shortName}",\r\n`;
}
async function downloadAll() {
    for (const [key, value] of Object.entries(allVids)) {
        await downloadAudio(key, value);
    }
    jsonInfo += "};\r\n";
    speechInfo += `
]
    */`;
    jsonFolder = "../src/apps";
    fs.writeFile(path.join(jsonFolder, "mediaGenerated.js"), jsonInfo + speechInfo, (err) => {
        if (err) throw err;
        console.log("JSON file saved!");
    });
}

downloadAll();
